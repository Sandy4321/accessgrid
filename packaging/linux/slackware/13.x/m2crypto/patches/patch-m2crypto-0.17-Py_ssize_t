diff -ur m2crypto/SWIG/_aes.i m2crypto-0.17beta1/SWIG/_aes.i
--- SWIG/_aes.i.orig	2006-03-17 19:55:17.000000000 +0100
+++ SWIG/_aes.i	2006-12-14 03:59:16.000000000 +0100
@@ -43,7 +43,7 @@
 */
 PyObject *AES_set_key(AES_KEY *key, PyObject *value, int bits, int op) { 
     const void *vbuf; 
-    int vlen;
+    Py_ssize_t vlen;
 
     if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
         return NULL;
@@ -62,7 +62,7 @@
 */
 PyObject *AES_crypt(const AES_KEY *key, PyObject *in, int outlen, int op) {
     const void *buf;
-    int len;
+    Py_ssize_t len;
     unsigned char *out;
 
     if (PyObject_AsReadBuffer(in, &buf, &len) == -1)
diff -ur m2crypto/SWIG/_asn1.i m2crypto-0.17beta1/SWIG/_asn1.i
--- SWIG/_asn1.i.orig	2006-03-09 02:50:42.000000000 +0100
+++ SWIG/_asn1.i	2006-12-14 04:23:49.000000000 +0100
@@ -39,12 +39,18 @@
 
 %typemap(in) (const void *, int) { 
     if (PyString_Check($input)) {
+        Py_ssize_t len;
+
         $1 = PyString_AsString($input); 
-        $2 = PyString_Size($input);
+        len = PyString_Size($input);
+        if (len > INT_MAX) {
+            PyErr_SetString(PyExc_ValueError, "object too large");
+            return NULL;
+        }
+        $2 = len;
     } else {
-        $1 = NULL;
-        $2 = 0;
         PyErr_SetString(PyExc_TypeError, "expected string");
+        return NULL;
     }
 }
 
diff -ur m2crypto/SWIG/_bio.i m2crypto-0.17beta1/SWIG/_bio.i
--- SWIG/_bio.i.orig	2006-03-08 20:56:46.000000000 +0100
+++ SWIG/_bio.i	2006-12-14 00:53:48.000000000 +0100
@@ -122,7 +122,7 @@
     const void *fbuf;
     int flen, ret;
 
-    if (PyObject_AsReadBuffer(from, &fbuf, &flen) == -1)
+    if (m2_PyObject_AsReadBufferInt(from, &fbuf, &flen) == -1)
         return -1;
 
     Py_BEGIN_ALLOW_THREADS
@@ -171,7 +171,7 @@
 
 PyObject *bio_set_cipher(BIO *b, EVP_CIPHER *c, PyObject *key, PyObject *iv, int op) {
     const void *kbuf, *ibuf;
-    int klen, ilen;
+    Py_ssize_t klen, ilen;
 
     if ((PyObject_AsReadBuffer(key, &kbuf, &klen) == -1)
         || (PyObject_AsReadBuffer(iv, &ibuf, &ilen) == -1))
diff -ur m2crypto/SWIG/_dh.i m2crypto-0.17beta1/SWIG/_dh.i
--- SWIG/_dh.i.orig	2006-03-08 20:56:46.000000000 +0100
+++ SWIG/_dh.i	2006-12-14 01:15:44.000000000 +0100
@@ -85,7 +85,7 @@
     BIGNUM *pk;
     PyObject *ret;
 
-    if (PyObject_AsReadBuffer(pubkey, &pkbuf, &pklen) == -1)
+    if (m2_PyObject_AsReadBufferInt(pubkey, &pkbuf, &pklen) == -1)
         return NULL;
 
     if (!(pk = BN_mpi2bn((unsigned char *)pkbuf, pklen, NULL))) {
@@ -146,7 +146,7 @@
     const void *vbuf;
     int vlen;
 
-    if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
+    if (m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
         return NULL;
 
     if (!(bn = BN_mpi2bn((unsigned char *)vbuf, vlen, NULL))) {
@@ -165,7 +165,7 @@
     const void *vbuf;
     int vlen;
 
-    if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
+    if (m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
         return NULL;
 
     if (!(bn = BN_mpi2bn((unsigned char *)vbuf, vlen, NULL))) {
diff -ur m2crypto/SWIG/_dsa.i m2crypto-0.17beta1/SWIG/_dsa.i
--- SWIG/_dsa.i.orig	2006-05-10 23:31:24.000000000 +0200
+++ SWIG/_dsa.i	2006-12-14 01:03:37.000000000 +0100
@@ -102,7 +102,7 @@
     const void *vbuf;
     int vlen;
 
-    if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
+    if (m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
         return NULL;
 
     if (!(bn = BN_mpi2bn((unsigned char *)vbuf, vlen, NULL))) {
@@ -121,7 +121,7 @@
     const void *vbuf;
     int vlen;
 
-    if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
+    if (m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
         return NULL;
 
     if (!(bn = BN_mpi2bn((unsigned char *)vbuf, vlen, NULL))) {
@@ -140,7 +140,7 @@
     const void *vbuf;
     int vlen;
 
-    if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
+    if (m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
         return NULL;
 
     if (!(bn = BN_mpi2bn((unsigned char *)vbuf, vlen, NULL))) {
@@ -215,7 +215,7 @@
     PyObject *tuple;
     DSA_SIG *sig; 
 
-    if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
+    if (m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
         return NULL;
 
     if (!(sig = DSA_do_sign(vbuf, vlen, dsa))) {
@@ -239,9 +239,9 @@
     DSA_SIG *sig;
     int ret;
 
-    if ((PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
-        || (PyObject_AsReadBuffer(r, &rbuf, &rlen) == -1)
-        || (PyObject_AsReadBuffer(s, &sbuf, &slen) == -1))
+    if ((m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
+        || (m2_PyObject_AsReadBufferInt(r, &rbuf, &rlen) == -1)
+        || (m2_PyObject_AsReadBufferInt(s, &sbuf, &slen) == -1))
         return -1;
 
     if (!(sig = DSA_SIG_new())) {
@@ -272,7 +272,7 @@
     int siglen;
     PyObject *ret;
 
-    if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
+    if (m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
         return NULL;
 
     if (!(sigbuf = PyMem_Malloc(DSA_size(dsa)))) {
@@ -294,8 +294,9 @@
     void *sbuf;
     int vlen, slen, ret;
 
-    if ((PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
-        || (PyObject_AsReadBuffer(sig, (const void **)&sbuf, &slen) == -1))
+    if ((m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
+        || (m2_PyObject_AsReadBufferInt(sig, (const void **)&sbuf, &slen)
+	    == -1))
         return -1;
 
     if ((ret = DSA_verify(0, vbuf, vlen, sbuf, slen, dsa)) == -1)
diff -ur m2crypto/SWIG/_ec.i m2crypto-0.17beta1/SWIG/_ec.i
--- SWIG/_ec.i.orig	2006-10-31 19:41:27.000000000 +0100
+++ SWIG/_ec.i	2006-12-14 01:15:25.000000000 +0100
@@ -159,7 +159,8 @@
 
     unsigned char *src=NULL;
     void *dst=NULL;
-    int src_len=0,dst_len=0;
+    int src_len=0;
+    Py_ssize_t dst_len=0;
     PyObject *pyo=NULL;
     int ret=0;
     
@@ -241,7 +242,7 @@
     PyObject *tuple;
     ECDSA_SIG *sig; 
 
-    if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
+    if (m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
         return NULL;
 
     if (!(sig = ECDSA_do_sign(vbuf, vlen, key))) {
@@ -265,9 +266,9 @@
     ECDSA_SIG *sig;
     int ret;
 
-    if ((PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
-        || (PyObject_AsReadBuffer(r, &rbuf, &rlen) == -1)
-        || (PyObject_AsReadBuffer(s, &sbuf, &slen) == -1))
+    if ((m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
+        || (m2_PyObject_AsReadBufferInt(r, &rbuf, &rlen) == -1)
+        || (m2_PyObject_AsReadBufferInt(s, &sbuf, &slen) == -1))
         return -1;
 
     if (!(sig = ECDSA_SIG_new())) {
@@ -299,7 +300,7 @@
     int siglen;
     PyObject *ret;
 
-    if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
+    if (m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
         return NULL;
 
     if (!(sigbuf = PyMem_Malloc(ECDSA_size(key)))) {
@@ -322,8 +323,9 @@
     void *sbuf;
     int vlen, slen, ret;
 
-    if ((PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
-        || (PyObject_AsReadBuffer(sig, (const void **)&sbuf, &slen) == -1))
+    if ((m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
+        || (m2_PyObject_AsReadBufferInt(sig, (const void **)&sbuf, &slen)
+	    == -1))
         return -1;
 
     if ((ret = ECDSA_verify(0, vbuf, vlen, sbuf, slen, key)) == -1)
@@ -366,8 +368,7 @@
 
 EC_KEY* ec_key_from_pubkey_der(PyObject *pubkey) {
     const void *keypairbuf;
-    int keypairbuflen;
-    long tempLen;
+    Py_ssize_t keypairbuflen;
     const unsigned char *tempBuf;
     EC_KEY *keypair;
 
@@ -377,8 +378,7 @@
     }
 
     tempBuf = (const unsigned char *)keypairbuf;
-    tempLen = (long)keypairbuflen;
-    if ((keypair = d2i_EC_PUBKEY( NULL, &tempBuf, tempLen )) == 0)
+    if ((keypair = d2i_EC_PUBKEY( NULL, &tempBuf, keypairbuflen)) == 0)
     {
         PyErr_SetString(_ec_err, ERR_reason_error_string(ERR_get_error()));
         return NULL;
diff -ur m2crypto/SWIG/_evp.i m2crypto-0.17beta1/SWIG/_evp.i
--- SWIG/_evp.i.orig.orig	2006-12-06 06:30:34.000000000 +0100
+++ SWIG/_evp.i	2006-12-14 01:25:53.000000000 +0100
@@ -168,12 +168,12 @@
 
 int digest_update(EVP_MD_CTX *ctx, PyObject *blob) {
     const void *buf;
-    int len;
+    Py_ssize_t len;
 
     if (PyObject_AsReadBuffer(blob, &buf, &len) == -1)
         return -1;
 
-    return EVP_DigestUpdate(ctx, buf, (unsigned int)len);
+    return EVP_DigestUpdate(ctx, buf, len);
 }
 
 PyObject *digest_final(EVP_MD_CTX *ctx) {
@@ -211,7 +211,7 @@
     const void *kbuf;
     int klen;
 
-    if (PyObject_AsReadBuffer(key, &kbuf, &klen) == -1)
+    if (m2_PyObject_AsReadBufferInt(key, &kbuf, &klen) == -1)
         return NULL;
 
     HMAC_Init(ctx, kbuf, klen, md);
@@ -221,12 +221,12 @@
 
 PyObject *hmac_update(HMAC_CTX *ctx, PyObject *blob) {
     const void *buf;
-    int len;
+    Py_ssize_t len;
 
     if (PyObject_AsReadBuffer(blob, &buf, &len) == -1)
         return NULL;
 
-    HMAC_Update(ctx, buf, (unsigned int)len);
+    HMAC_Update(ctx, buf, len);
     Py_INCREF(Py_None);
     return Py_None;
 }
@@ -249,10 +249,11 @@
 PyObject *hmac(PyObject *key, PyObject *data, const EVP_MD *md) {
     const void *kbuf, *dbuf;
     void *blob;
-    int klen, dlen, blen;
+    int klen, blen;
+    Py_ssize_t dlen;
     PyObject *ret;
 
-    if ((PyObject_AsReadBuffer(key, &kbuf, &klen) == -1)
+    if ((m2_PyObject_AsReadBufferInt(key, &kbuf, &klen) == -1)
         || (PyObject_AsReadBuffer(data, &dbuf, &dlen) == -1))
         return NULL;
 
@@ -289,10 +290,11 @@
                         int iter) {
     unsigned char key[EVP_MAX_KEY_LENGTH];
     const void *dbuf, *sbuf;
-    int dlen, slen, klen;
+    int dlen, klen;
+    Py_ssize_t slen;
     PyObject *ret;
 
-    if ((PyObject_AsReadBuffer(data, &dbuf, &dlen) == -1)
+    if ((m2_PyObject_AsReadBufferInt(data, &dbuf, &dlen) == -1)
         || (PyObject_AsReadBuffer(salt, &sbuf, &slen) == -1))
         return NULL;
 
@@ -307,7 +309,7 @@
 PyObject *cipher_init(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, 
                         PyObject *key, PyObject *iv, int mode) {
     const void *kbuf, *ibuf;
-    int klen, ilen;
+    Py_ssize_t klen, ilen;
 
     if ((PyObject_AsReadBuffer(key, &kbuf, &klen) == -1)
         || (PyObject_AsReadBuffer(iv, &ibuf, &ilen) == -1))
@@ -324,7 +326,7 @@
     void *obuf;
     PyObject *ret;
 
-    if (PyObject_AsReadBuffer(blob, &buf, &len) == -1)
+    if (m2_PyObject_AsReadBufferInt(blob, &buf, &len) == -1)
         return NULL;
 
     if (!(obuf = PyMem_Malloc(len + EVP_CIPHER_CTX_block_size(ctx) - 1))) {
@@ -354,7 +356,7 @@
 
 PyObject *sign_update(EVP_MD_CTX *ctx, PyObject *blob) {
     const void *buf;
-    int len;
+    Py_ssize_t len;
 
     if (PyObject_AsReadBuffer(blob, &buf, &len) == -1)
         return NULL;
@@ -377,7 +379,7 @@
 
 int verify_update(EVP_MD_CTX *ctx, PyObject *blob) {
     const void *buf;
-    int len;
+    Py_ssize_t len;
 
     if (PyObject_AsReadBuffer(blob, &buf, &len) == -1)
         return -1;
@@ -390,7 +392,7 @@
     unsigned char *kbuf; 
     int len;
 
-    if (PyObject_AsReadBuffer(blob, (const void **)&kbuf, &len) == -1)
+    if (m2_PyObject_AsReadBufferInt(blob, (const void **)&kbuf, &len) == -1)
         return -1;
 
     return EVP_VerifyFinal(ctx, kbuf, len, pkey);
diff -ur m2crypto/SWIG/_lib.h m2crypto-0.17beta1/SWIG/_lib.h
--- SWIG/_lib.h.orig	2005-06-09 19:32:28.000000000 +0200
+++ SWIG/_lib.h	2006-12-14 05:08:26.000000000 +0100
@@ -10,6 +10,10 @@
 Blob *blob_copy(Blob *from, const char *errmsg);
 void blob_free(Blob *blob);
 
+static int m2_PyObject_AsReadBufferInt(PyObject *obj, const void **buffer,
+                                       int *buffer_len);
+static int m2_PyString_AsStringAndSizeInt(PyObject *obj, char **s, int *len);
+
 void gen_callback(int p, int n, void *arg);
 int passphrase_callback(char *buf, int num, int v, void *userdata);
 
diff -ur m2crypto/SWIG/_lib.i m2crypto-0.17beta1/SWIG/_lib.i
--- SWIG/_lib.i.orig	2006-12-06 06:30:34.000000000 +0100
+++ SWIG/_lib.i	2006-12-14 05:11:56.000000000 +0100
@@ -44,6 +44,50 @@
 }
 
 
+/* Python helpers. */
+
+%}
+%ignore m2_PyObject_AsReadBufferInt;
+%ignore m2_PyString_AsStringAndSizeInt;
+%{
+static int
+m2_PyObject_AsReadBufferInt(PyObject *obj, const void **buffer,
+			    int *buffer_len)
+{
+    int ret;
+    Py_ssize_t len;
+
+    ret = PyObject_AsReadBuffer(obj, buffer, &len);
+    if (ret != 0)
+        return ret;
+    if (len > INT_MAX) {
+        PyErr_SetString(PyExc_ValueError, "object too large");
+        return -1;
+    }
+    *buffer_len = len;
+    return 0;
+}
+
+static int
+m2_PyString_AsStringAndSizeInt(PyObject *obj, char **s, int *len)
+{
+    int ret;
+    Py_ssize_t len2;
+
+    if (len == NULL)
+	return PyString_AsStringAndSize(obj, s, NULL);
+    ret = PyString_AsStringAndSize(obj, s, &len2);
+    if (ret != 0)
+	return ret;
+    if (len2 > INT_MAX) {
+	PyErr_SetString(PyExc_ValueError, "string too large");
+	return -1;
+    }
+    *len = len2;
+    return 0;
+}
+
+
 /* C callbacks invoked by OpenSSL; these in turn call back into 
 Python. */
 
@@ -215,7 +259,8 @@
 }
 
 int passphrase_callback(char *buf, int num, int v, void *arg) {
-    int i, len;
+    int i;
+    Py_ssize_t len;
     char *str;
     PyObject *argv, *ret, *cbfunc;
 
@@ -270,7 +315,7 @@
     const void *vbuf;
     int vlen;
 
-    if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
+    if (m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
         return NULL;
 
     return BN_mpi2bn(vbuf, vlen, NULL);
@@ -296,7 +341,7 @@
     const void *vbuf;
     int vlen;
 
-    if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
+    if (m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
         return NULL;
 
     return BN_bin2bn(vbuf, vlen, NULL);
@@ -305,7 +350,7 @@
 PyObject *bn_to_hex(BIGNUM *bn) {
     char *hex;
     PyObject *pyo;  
-    int len;
+    Py_ssize_t len;
 
     hex = BN_bn2hex(bn);
     if (!hex) {
@@ -322,7 +367,7 @@
 
 BIGNUM *hex_to_bn(PyObject *value) {
     const void *vbuf;
-    int vlen;
+    Py_ssize_t vlen;
     BIGNUM *bn;
 
     if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
@@ -343,7 +388,7 @@
 
 BIGNUM *dec_to_bn(PyObject *value) {
     const void *vbuf;
-    int vlen;
+    Py_ssize_t vlen;
     BIGNUM *bn;
 
     if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
@@ -367,17 +412,24 @@
 /* Various useful typemaps. */
 
 %typemap(in) Blob * {
+    Py_ssize_t len;
+
     if (!PyString_Check($input)) {
         PyErr_SetString(PyExc_TypeError, "expected PyString");
         return NULL;
     }
+    len=PyString_Size($input);
+    if (len > INT_MAX) {
+        PyErr_SetString(PyExc_ValueError, "object too large");
+        return -1;
+    }
     $1=(Blob *)PyMem_Malloc(sizeof(Blob));
     if (!$1) {
         PyErr_SetString(PyExc_MemoryError, "malloc Blob");
         return NULL;
     }
     $1->data=(unsigned char *)PyString_AsString($input);
-    $1->len=PyString_Size($input);
+    $1->len=len;
 }
 
 %typemap(out) Blob * {
diff -ur m2crypto/SWIG/_rand.i m2crypto-0.17beta1/SWIG/_rand.i
--- SWIG/_rand.i.orig	2006-06-05 23:29:00.000000000 +0200
+++ SWIG/_rand.i	2006-12-14 03:36:39.000000000 +0100
@@ -27,7 +27,7 @@
     const void *buf;
     int len;
 
-    if (PyObject_AsReadBuffer(seed, &buf, &len) == -1)
+    if (m2_PyObject_AsReadBufferInt(seed, &buf, &len) == -1)
         return NULL;
 
     RAND_seed(buf, len);
@@ -39,7 +39,7 @@
     const void *buf;
     int len;
 
-    if (PyObject_AsReadBuffer(blob, &buf, &len) == -1)
+    if (m2_PyObject_AsReadBufferInt(blob, &buf, &len) == -1)
         return NULL;
 
     RAND_add(buf, len, entropy);
diff -ur m2crypto/SWIG/_rc4.i m2crypto-0.17beta1/SWIG/_rc4.i
--- SWIG/_rc4.i.orig	2006-03-07 21:51:58.000000000 +0100
+++ SWIG/_rc4.i	2006-12-14 03:39:44.000000000 +0100
@@ -25,7 +25,7 @@
     const void *vbuf;
     int vlen;
 
-    if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
+    if (m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
         return NULL;
 
     RC4_set_key(key, vlen, vbuf);
@@ -36,7 +36,7 @@
 PyObject *rc4_update(RC4_KEY *key, PyObject *in) {
     PyObject *ret;
     const void *buf;
-    int len;
+    Py_ssize_t len;
     void *out;
 
     if (PyObject_AsReadBuffer(in, &buf, &len) == -1)
diff -ur m2crypto/SWIG/_rsa.i m2crypto-0.17beta1/SWIG/_rsa.i
--- SWIG/_rsa.i.orig	2006-05-02 23:00:53.000000000 +0200
+++ SWIG/_rsa.i	2006-12-14 05:13:13.000000000 +0100
@@ -105,7 +105,7 @@
     const void *vbuf;
     int vlen;
 
-    if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
+    if (m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
         return NULL;
 
     if (!(bn = BN_mpi2bn((unsigned char *)vbuf, vlen, NULL))) {
@@ -124,7 +124,7 @@
     const void *vbuf;
     int vlen;
 
-    if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
+    if (m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
         return NULL;
 
     if (!(bn = BN_mpi2bn((unsigned char *)vbuf, vlen, NULL))) {
@@ -143,7 +143,7 @@
     const void *vbuf;
     int vlen;
 
-    if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
+    if (m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
         return NULL;
 
     if (!(bn = BN_bin2bn((unsigned char *)vbuf, vlen, NULL))) {
@@ -162,7 +162,7 @@
     const void *vbuf;
     int vlen;
 
-    if (PyObject_AsReadBuffer(value, &vbuf, &vlen) == -1)
+    if (m2_PyObject_AsReadBufferInt(value, &vbuf, &vlen) == -1)
         return NULL;
 
     if (!(bn = BN_bin2bn((unsigned char *)vbuf, vlen, NULL))) {
@@ -182,7 +182,7 @@
     int flen, tlen;
     PyObject *ret;
 
-    if (PyObject_AsReadBuffer(from, &fbuf, &flen) == -1)
+    if (m2_PyObject_AsReadBufferInt(from, &fbuf, &flen) == -1)
         return NULL;
 
     if (!(tbuf = PyMem_Malloc(BN_num_bytes(rsa->n)))) {
@@ -207,7 +207,7 @@
     int flen, tlen;
     PyObject *ret;
 
-    if (PyObject_AsReadBuffer(from, &fbuf, &flen) == -1)
+    if (m2_PyObject_AsReadBufferInt(from, &fbuf, &flen) == -1)
         return NULL;
 
     if (!(tbuf = PyMem_Malloc(BN_num_bytes(rsa->n)))) {
@@ -232,7 +232,7 @@
     int flen, tlen;
     PyObject *ret;
 
-    if (PyObject_AsReadBuffer(from, &fbuf, &flen) == -1)
+    if (m2_PyObject_AsReadBufferInt(from, &fbuf, &flen) == -1)
         return NULL;
 
     if (!(tbuf = PyMem_Malloc(BN_num_bytes(rsa->n)))) {
@@ -257,7 +257,7 @@
     int flen, tlen;
     PyObject *ret;
 
-    if (PyObject_AsReadBuffer(from, &fbuf, &flen) == -1)
+    if (m2_PyObject_AsReadBufferInt(from, &fbuf, &flen) == -1)
         return NULL;
 
     if (!(tbuf = PyMem_Malloc(BN_num_bytes(rsa->n)))) {
@@ -285,7 +285,8 @@
     unsigned char * sign_buf = NULL;
     PyObject *signature; 
     
-    ret = PyString_AsStringAndSize(py_digest_string, &digest_string, &digest_len); 
+    ret = m2_PyString_AsStringAndSizeInt(py_digest_string, &digest_string,
+					 &digest_len); 
     if (ret == -1) {
         /* PyString_AsStringAndSize raises the correct exceptions. */
         return NULL;
@@ -312,13 +313,15 @@
     char * verify_string = NULL;
     int verify_len = 0;
     int sign_len = 0;
-    
-    ret = PyString_AsStringAndSize(py_verify_string, &verify_string, &verify_len); 
+
+    ret = m2_PyString_AsStringAndSizeInt(py_verify_string, &verify_string,
+					 &verify_len);
     if (ret == -1) {
         /* PyString_AsStringAndSize raises the correct exceptions. */
         return 0;
     }
-    ret = PyString_AsStringAndSize(py_sign_string, &sign_string, &sign_len);
+    ret = m2_PyString_AsStringAndSizeInt(py_sign_string, &sign_string,
+					 &sign_len);
     if (ret == -1) {
         return 0;
     }
diff -ur m2crypto/SWIG/_ssl.i m2crypto-0.17beta1/SWIG/_ssl.i
--- SWIG/_ssl.i.orig	2006-04-01 00:11:55.000000000 +0200
+++ SWIG/_ssl.i	2006-12-14 03:49:17.000000000 +0100
@@ -268,7 +268,7 @@
     const void *buf;
     int len;
 
-    if (PyObject_AsReadBuffer(sid_ctx, &buf, &len) == -1)
+    if (m2_PyObject_AsReadBufferInt(sid_ctx, &buf, &len) == -1)
         return -1;
 
     return SSL_CTX_set_session_id_context(ctx, buf, len);
@@ -337,7 +337,7 @@
     const void *buf;
     int len;
 
-    if (PyObject_AsReadBuffer(sid_ctx, &buf, &len) == -1)
+    if (m2_PyObject_AsReadBufferInt(sid_ctx, &buf, &len) == -1)
         return -1;
 
     return SSL_set_session_id_context(ssl, buf, len);
@@ -550,7 +550,7 @@
 
     gilstate = PyGILState_Ensure();
 
-    if (PyObject_AsReadBuffer(blob, &buf, &len) == -1) {
+    if (m2_PyObject_AsReadBufferInt(blob, &buf, &len) == -1) {
         PyGILState_Release(gilstate);
         return -1;
     }
@@ -599,7 +599,7 @@
 
     gilstate = PyGILState_Ensure();
 
-    if (PyObject_AsReadBuffer(blob, &buf, &len) == -1) {
+    if (m2_PyObject_AsReadBufferInt(blob, &buf, &len) == -1) {
         PyGILState_Release(gilstate);
         return -1;
     }
diff -ur m2crypto/SWIG/_util.i m2crypto-0.17beta1/SWIG/_util.i
--- SWIG/_util.i.orig	2006-03-07 21:51:58.000000000 +0100
+++ SWIG/_util.i	2006-12-14 03:53:20.000000000 +0100
@@ -17,12 +17,12 @@
     PyObject *obj;
     const void *buf;
     char *ret;
-    int len;
+    Py_ssize_t len;
 
     if (PyObject_AsReadBuffer(blob, &buf, &len) == -1)
         return NULL;
 
-    ret = hex_to_string((unsigned char *)buf, (long)len);
+    ret = hex_to_string((unsigned char *)buf, len);
     if (!ret) {
         PyErr_SetString(_util_err, ERR_reason_error_string(ERR_get_error()));
         return NULL;
@@ -36,12 +36,14 @@
     PyObject *obj;
     const void *buf;
     unsigned char *ret;
-    int len;
+    Py_ssize_t len0;
+    long len;
 
-    if (PyObject_AsReadBuffer(blob, &buf, &len) == -1)
+    if (PyObject_AsReadBuffer(blob, &buf, &len0) == -1)
         return NULL;
 
-    ret = string_to_hex((char *)buf, (long *)&len);
+    len = len0;
+    ret = string_to_hex((char *)buf, &len);
     if (ret == NULL) {
         PyErr_SetString(_util_err, ERR_reason_error_string(ERR_get_error()));
         return NULL;
diff -ur m2crypto/SWIG/_x509.i m2crypto-0.17beta1/SWIG/_x509.i
--- SWIG/_x509.i.orig	2006-12-06 06:30:34.000000000 +0100
+++ SWIG/_x509.i	2006-12-14 03:57:24.000000000 +0100
@@ -510,10 +510,14 @@
 STACK *
 make_stack_from_der_sequence(PyObject * pyEncodedString){
     STACK_OF(X509) *certs;
-    int encoded_string_len;
+    Py_ssize_t encoded_string_len;
     char *encoded_string;
 
     encoded_string_len = PyString_Size(pyEncodedString);
+    if (encoded_string_len > INT_MAX) {
+        PyErr_SetString(PyExc_ValueError, "object too large");
+        return NULL;
+    }
     encoded_string = PyString_AsString(pyEncodedString);
 
     certs = ASN1_seq_unpack((unsigned char *)encoded_string, encoded_string_len, (D2ITYPE)d2i_X509, (void(*)())X509_free ); 
