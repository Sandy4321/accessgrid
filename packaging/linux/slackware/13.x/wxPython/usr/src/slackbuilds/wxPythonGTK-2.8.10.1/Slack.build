name=wxPythonGTK
version=2.8.10.1
ver2=2.8
release=2
arch=${ARCH:-`uname -m`}
srcpkg=wxPython-src-${version}.tar.bz2
TMP=${TMP:-/var/tmp}
buildroot=${TMP}
builddir=${buildroot}/${name}-${version}
pkgdir=${buildroot}/${name}-${version}-pkg
docdir=${pkgdir}/usr/doc/${name}-${version}
tag=${TAG:-_uqv}
pkgname=${name}-${version}-${arch}-${release}${tag}.txz
distro=slackware
releasedir=${RELEASEDIR:-/tmp}
prefix=${PREFIX:-/usr}

port=gtk2
unicode=1
chartype=$(if [ "${unicode}" = "1" ]; then echo unicode; else echo ansi; fi)
use_swig=0
swig_binary=swigwx1.3.29

functions=/usr/lib/slackbuilds/functions

master_sites=http://downloads.sourceforge.net/wxpython/wxPython-src-2.8.10.1.tar.bz2
master_sites=http://www.vislab.uq.edu.au/ag3/distfiles/
distdir=/nfs/linux/distfiles/

if [ "${arch}" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mtune=i686"
  LIBDIR="${prefix}/lib"
  ARCH_CONFIGURE=""
elif [ "${arch}" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
  LIBDIR="${prefix}/lib"
  ARCH_CONFIGURE=""
elif [ "${arch}" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIR="${prefix}/lib"
  ARCH_CONFIGURE=""
elif [ "${arch}" = "s390" ]; then
  SLKCFLAGS="-O2"
  LIBDIR="${prefix}/lib"
  ARCH_CONFIGURE=""
elif [ "${arch}" = "x86_64" -o "${arch}" = "x86_64_slamd64" ]; then
  SLKCFLAGS="-O2"
  LIBDIR="${prefix}/lib64"
  ARCH_CONFIGURE="--libdir=$LIBDIR"
fi

wxprefbase=${LIBDIR}/wx
wxpref=${wxprefbase}-${version}-${port}-${chartype}

# Add space separated list here 
# of prerequsite packages _for building_
#
prereqs="slackbuilds"

here=`pwd`
#patch0=${here}/patches/patch-something.c

set -e

PATH=/sbin:${PATH}
. ${functions}

python=python${pyver}

check_prereqs ${prereqs} || exit

get_srcpkg ${srcpkg}

#
#
[ -d ${builddir} -a ${builddir} != / ] && rm -rf ${builddir}
[ -d ${pkgdir} -a ${pkgdir} != / ] && rm -rf ${pkgdir}
mkdir -p ${pkgdir}

#
#
cd ${buildroot}
tar jxvf ${here}/${srcpkg}
mv wxPython-src-${version} ${builddir}
cd ${builddir}
WXDIR=`pwd`

# Apply patches
# like this: do_patch ${patch0}
#

#echo -n "Post patch sleep 5 ..."
#sleep 5

# Build & install
#
mkdir -p bld
cd bld
CFLAGS="$SLKCFLAGS" \
../configure     \
    --prefix=${wxpref} \
    --sysconfdir=/etc \
    --localstatedir=/var \
    --disable-static \
    --enable-sound \
    --with-sdl \
    --with-opengl \
    --without-gnomeprint \
    --enable-unicode \
    --enable-graphics_ctx \
    --build=${arch}-${distro}-linux 

make \
    && make -C contrib/src/gizmos \
    && make -C contrib/src/stc

make install prefix=${wxpref} DESTDIR=${pkgdir} \
    && make -C contrib/src/gizmos prefix=${wxpref} install DESTDIR=${pkgdir} \
    && make -C contrib/src/stc prefix=${wxpref} install DESTDIR=${pkgdir}

# Now build wxPython
cd $WXDIR/wxPython
${python} setup.py \
    USE_SWIG=${use_swig} \
    SWIG=${swig_binary} \
    WXPORT=${port} \
    UNICODE=${unicode} \
    EP_ADD_OPTS=1 \
    EP_FULL_VER=0 \
    NO_SCRIPTS=1 \
    WX_CONFIG="$WXDIR/bld/wx-config --no_rpath" \
    build_ext --rpath=${wxpref}/lib \
    build

# Install wxPython
${python} setup.py \
    USE_SWIG=${use_swig} \
    SWIG=${swig_binary} \
    WXPORT=${port} \
    UNICODE=${unicode} \
    EP_ADD_OPTS=1 \
    EP_FULL_VER=0 \
    NO_SCRIPTS=1 \
    WX_CONFIG="${pkgdir}/${wxpref}/bin/wx-config --prefix=${pkgdir}/${wxpref} --no_rpath" \
    build_ext --rpath=${wxpref}/lib \
    install \
    --root=${pkgdir}


strip ${pkgdir}/${prefix}/lib*/python${pyver}/*-packages/wx-${ver2}*-${port}-${chartype}/wx/*.so

# Install GNOME menu items
mkdir -p ${pkgdir}/usr/share/applications
for d in distrib/*.desktop; do
    install -m 644 $d ${pkgdir}/usr/share/applications/
done

# Install icons
mkdir -p ${pkgdir}/usr/share/icons/hicolor/{16x16,32x32}/apps
mkdir -p ${pkgdir}/usr/share/pixmaps
install -m 644 wx/py/PyCrust_16.png ${pkgdir}/usr/share/icons/hicolor/16x16/apps/PyCrust.png
install -m 644 wx/py/PyCrust_32.png ${pkgdir}/usr/share/icons/hicolor/32x32/apps/PyCrust.png
install -m 644 wx/py/PyCrust_32.png ${pkgdir}/usr/share/pixmaps/PyCrust.png
install -m 644 wx/tools/XRCed/XRCed_16.png ${pkgdir}/usr/share/icons/hicolor/16x16/apps/XRCed.png
install -m 644 wx/tools/XRCed/XRCed_32.png ${pkgdir}/usr/share/icons/hicolor/32x32/apps/XRCed.png
install -m 644 wx/tools/XRCed/XRCed_32.png ${pkgdir}/usr/share/pixmaps/XRCed.png

# Juggle some build product locations
mv ${pkgdir}/${wxpref}/share/* ${pkgdir}/usr/share/ && rmdir ${pkgdir}/${wxpref}/share
mv ${pkgdir}/${wxpref}/bin ${pkgdir}/usr/
mkdir ${pkgdir}/usr/include
(cd ${pkgdir}/usr/include && ln -s ${wxpref}/include/wx-${ver2})

# For some reason, these wxPython include files are in thr wrong place
[ -d ${pkgdir}/include ] && {
    mv ${pkgdir}/include/wx-${ver2}/wx/wxPython ${pkgdir}/${wxpref}/include/wx-${ver2}/wx/
    rm -rf ${pkgdir}/include
}
#(cd ${pkgdir}/usr/include/ && ln -s wx-${ver2}/wx )

# Make libraries visible - doinst.sh should ensure this directory is included
mkdir -p ${pkgdir}/etc/ld.so.conf.d
echo "${wxpref}/lib" >${pkgdir}/etc/ld.so.conf.d/wx-${version}-${port}-${chartype}.conf

# Docs
#
mkdir -p ${docdir}
cp -a ${builddir}/wxPython/samples	\
	${docdir}/
cd ${builddir}/docs
cp -a gtk html publicity changes.txt gpl.txt lgpl.txt licence.txt licendoc.txt \
    preamble.txt readme.txt toback24.txt todo.txt todo30.txt \
	${docdir}/

# Include build script
mkdir -p ${pkgdir}/usr/src/slackbuilds/${name}-${version}
( cd ${here}
    for bfd in Slack.build slack-* doinst.sh patches
    do
        [ -e ${bfd} ] && cp -a ${bfd} ${pkgdir}/usr/src/slackbuilds/${name}-${version}/
    done
)

# Package it 
#
mkdir -p ${pkgdir}/install
autogen_slack_required
for pkgfile in slack-required slack-conflicts slack-suggests slack-desc doinst.sh
do
  [ -f ${here}/${pkgfile} ] && cat ${here}/${pkgfile} >> ${pkgdir}/install/${pkgfile}
done
chmod 0644 ${pkgdir}/install/slack-*


cd ${pkgdir}
/sbin/makepkg -p -c n -l y ${releasedir}/${pkgname}
cd ${here}

# Clean up
#
echo -n "Cleaning up ... "
[ -d ${builddir} -a ${builddir} != / ] && rm -rf ${builddir}
[ -d ${pkgdir} -a ${pkgdir} != / ] && rm -rf ${pkgdir}
rm -f ${srcpkg}
echo


# Install immediately?
#
if [ $# -gt 0 -a "${1}" = "install" ]; then
  /sbin/upgradepkg --install-new --reinstall ${releasedir}/${pkgname}
fi


# Changelog
#
# 20090603 CKw - release 2
#  - fix dud slack-conflicts file
#
# 20090524 CKW - release 1 of 2.8.10.1
#
