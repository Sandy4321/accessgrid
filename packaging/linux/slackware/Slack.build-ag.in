#
# The following are variables that are used throughout the rest of the
# spec file. If you see %{variable_name} this is where it's assigned
#
name=AccessGrid
version=VERSION
release=RELEASE
prefix=/usr
sysconfdir=etc/${name}3/Config
sharedir=${prefix}/share
gnomedir=${sharedir}/gnome/apps
kdedir=${sharedir}/applnk
buildroot=/var/tmp/${name}-${version}
debug_package=${nil}

python=pythonPYVER
arch=${arch:-i486}
here=`pwd`
if [ $# -lt 1 ]; then
  echo "Please tell me the source directory"
  exit 4
fi
srcdir=${1}
pkgname=${name}-${version}-${arch}-${release}.tgz
xdgfiles=${here}/../xdg


#%prep
#%setup -n AccessGrid-%{version} -c
[ -n "${buildroot}" -a "${buildroot}" != / ] && rm -rf ${buildroot}
mkdir -p ${buildroot}

#
# The following builds the package using setup.py
# It starts by zipping up the services in the services directory
# then builds the package
#

#%build
echo ${pyver}

#
# The following installs the package in the buildroot,
# moves the etc directory to the "root" directory,
# until services are starting at boot
#

#%install
#
cp -a ${srcdir}/* ${buildroot}/
#
# Now remove gnome/kde stuff in favour of menues
#
rm -rf ${buildroot}/share/gnome
rm -rf ${buildroot}/share/applnk
mkdir -p ${buildroot}/share/AccessGrid
cp -a ${here}/../ag-ellipse.png ${buildroot}/share/AccessGrid/
mkdir -p ${buildroot}/etc/xdg/menus/applications-merged
cp ${xdgfiles}/AccessGrid3.menu ${buildroot}/etc/xdg/menus/applications-merged/
mkdir -p ${buildroot}/share/desktop-directories
cp -a ${xdgfiles}/*3*.directory ${buildroot}/share/desktop-directories/
mkdir -p ${buildroot}/share/applications/AccessGrid
cp -a ${xdgfiles}/*3*.desktop ${buildroot}/share/applications/AccessGrid/

# Move node services and shared apps into etc 
#
cd ${buildroot}
mv NodeServices etc/AccessGrid3
mv SharedApplications etc/AccessGrid3/
mkdir -p etc/AccessGrid3/Services
mkdir -p etc/AccessGrid3/PackageCache
mkdir -p etc/AccessGrid3/Logs

# TEMPORARY links for AG2,AG3
#
#ln -s AccessGrid etc/AccessGrid3
#(cd lib/${python}/site-packages && ln -s AccessGrid3/AccessGrid .)

# Create a usr dir, and move dirs thereunder
mkdir usr
mv share usr/share
mv lib usr/lib
mv bin usr/bin


#
# AccessGrid package postinstall commands
# - Make a file, /tmp/AccessGrid-Postinstall.py, run it, then delete.
#   This script will compile all the AccessGrid python modules
#

#%post
mkdir ${buildroot}/install
cat <<EOF > ${buildroot}/install/AccessGrid-Postinstall.py
#!/usr/bin/${python}
import AccessGrid
import AccessGrid.hosting
import os
import os.path
import glob
import sys

def modimport(module):
    for module_file in glob.glob(os.path.join(module.__path__[0], "*.py")):
	try:
            __import__(module.__name__ + "." + os.path.basename(module_file[:-3]))
	except:
	    pass

sys.stdout.write("Compiling Access Grid Python modules.... ")
modimport(AccessGrid3)
modimport(AccessGrid3.hosting)
modimport(AccessGrid3.Platform)
sys.stdout.write("Done compiling AccessGrid modules\n")
EOF
chmod +x ${buildroot}/install/AccessGrid-Postinstall.py


# Invoke AccessGrid-Postinstall.py from /install/doinst.sh,
# register shared apps and fix vncviewer permissions.
#
cat <<EOF > ${buildroot}/install/doinst.sh
#!/bin/sh

agpm3.py --post-install
VNCEXE=/etc/AccessGrid3/SharedApplications/VenueVNC/vncviewer
if [ -f \${VNCEXE} ]; then
    chmod a+x \${VNCEXE}
fi

EOF
chmod +x ${buildroot}/install/doinst.sh


# package description
#
cat <<EOF >${buildroot}/install/slack-desc
${name}: ${name}-${version}
${name}: 
${name}: The Access Grid Toolkit provides the necessary components for
${name}: users to participate in Access Grid based collaborations,
${name}: and also for developers to work on network services,
${name}: applications services and node services to extend the
${name}: functionality of the Access Grid.
${name}: 
${name}: This module provides the core components
${name}: to start participating in the Access Grid.
${name}: 
EOF
chmod 0644 ${buildroot}/install/slack-desc

# Make the package
#
cd ${buildroot}
/sbin/makepkg -c n -l y -p ${here}/${pkgname}
cd ${here}



#%clean
#[ -n "${buildroot}" -a "${buildroot}" != / ] && rm -rf ${buildroot}

