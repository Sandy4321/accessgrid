#!/bin/sh

here=`pwd`
RET=0
CLEANONLY=0
DOCLEANUP=1
USEEXISTING=0

PKGNAME=ag-vic2.8ucl
#PKGVERSION=1.4.0r4449
#PKGVERSION=1.4.0r4533
#PKGVERSION=1.4.0r4651
#PKGVERSION=1.4.0r4694
#PKGVERSION=1.4.0r4773
PKGVERSION=1.4.0r4876

arch=${ARCH:-`uname -m`}
if [ ! "$arch" = "x86_64" ]; then
  arch=i386
fi

# Ensure some basics are set
[ -z ${PKGNAME} ] && { echo "PKGNAME needs to be set. Exiting now!"
  RET=`expr $RET + 1`
  exit $RET
}
[ -z ${PKGVERSION} ] && { echo "PKGVERSION needs to be set. Exiting now!"
  RET=`expr $RET + 1`
  exit $RET
}
[ -z ${DECKLINK_SDK_VERSION} ] && { echo "DECKLINK_SDK_VERSION needs to be set. Exiting now!"
  RET=`expr $RET + 1`
  exit $RET
}

# Set as many of these as are needed
#
site0=http://www.vislab.uq.edu.au/ag3/distfiles
#
svn_revision=r4876
ffmegversion=r20462
libswscaleversion=r29824
x264version=snapshot-20090708-2245
#
#workdir=mmedia-r4449
#workdir=mmedia-r4533
#srcpkg0=x264-r650.tar.gz
#srcpkg2=libswscale-r27137.tar.gz
#srcpkg3=ffmpeg-r13987.tar.gz
workdir=mmedia-${svn_revision}
srcpkg0=x264-${x264version=snapshot-20090708-2245}.tar.bz2
srcpkg1=${workdir}.tar.bz2
srcpkg2=libswscale-${libswscaleversion}.tar.bz2
srcpkg3=ffmpeg-${ffmegversion}.tar.bz2
srcpkg4=DeckLink_SDK_${DECKLINK_SDK_VERSION}.zip

myid=`id |cut -d ' ' -f 1 |cut -d '=' -f2 |cut -d '(' -f 1`
if [ ! "${myid}" = "0" ]; then
  echo "Must be root to run this script"
  RET=`expr $RET + 1`
  exit $RET
fi

while [ $# -ne 0 ]; do
  if [ "$1" = "noclean" ]; then
    DOCLEANUP=0
  elif [ "$1" = "existing" ]; then
    USEEXISTING=1
  elif [ "$1" = "clean" ]; then
    CLEANONLY=1
  else
    echo "Unknown option: \"$1\""
    echo "Exiting now"
    RET=`expr $RET + 1`
    exit $RET
  fi
  shift
done

[ -d debian ] || {
    echo "Can't continue without a debian directory. Exiting now"
    echo
    RET=`expr $RET + 1`
    exit $RET
}

# Clean up a bit
cleanup () {
  rm -rf ${workdir} *.gz *.bz2 "Blackmagic DeckLink SDK"* *.zip
  rm -rf ${PKGNAME}_*
}

# Create the build environment (unpack tarballs, insert debian directory)
#
generate() {
  # Obtain source tarballs
  wget ${site0}/${srcpkg0}
  wget ${site0}/${srcpkg1}
  wget ${site0}/${srcpkg2}
  wget ${site0}/${srcpkg3}
  wget ${site0}/${srcpkg4}
  
  
  # Generate the source environment
  tar xvf ${srcpkg1}
  ( cd ${workdir}/vic && tar xvf ${here}/${srcpkg3} )
  ( cd ${workdir}/vic/ffmpeg && tar xvf ${here}/${srcpkg2} )
  ( cd ${workdir}/vic && tar xvf ${here}/${srcpkg0} )

  ( cd ${workdir}/vic && ln -s x264-${x264version} x264 )
  
  cp -a debian ${workdir}/

  # Decklink stuff
  # Used to be:
  #  cp -a decklink ${workdir}/vic/
  mkdir -p ${workdir}/vic/decklink
  ( 
    unzip -o ${srcpkg4}
    cp -p Blackmagic\ DeckLink\ SDK\ ${DECKLINK_SDK_VERSION}/Linux/include/* ${workdir}/vic/decklink/
  )
}

if [ $CLEANONLY -ne 0 ]; then
  cleanup
  exit 0
fi

if [ $USEEXISTING -eq 0 ]; then
  cleanup
  generate
fi

echo "DIST=$DIST"
ARCH=${arch}; echo "ARCH=$ARCH"
# This is the actual building using fakeroot and pbuilder
#
#( cd ${workdir} && dpkg-buildpackage -S -rfakeroot -us -uc )
#RET=`expr $RET + $?`
#( cd ${workdir} && pbuilder build ../*.dsc 2>&1 |tee ../op )
( cd ${workdir} && DIST=$DIST ARCH=$ARCH pdebuild 2>&1 |tee ../op.$ARCH )
RET=`expr $RET + $?`
if [ $RET -gt 0 ]; then
  echo "ERROR building. Exiting now!"
  exit $RET
fi


if [ $DOCLEANUP -ne 0 ]; then
  cleanup
fi

echo "OK"
echo
