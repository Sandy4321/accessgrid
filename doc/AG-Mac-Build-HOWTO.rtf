{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset77 Arial-BoldMT;\f1\fswiss\fcharset77 Arial-BoldItalicMT;\f2\froman\fcharset77 Times-Roman;
\f3\froman\fcharset77 TimesNewRomanPSMT;\f4\fnil\fcharset77 LastResort;\f5\fmodern\fcharset77 CourierNewPSMT;
\f6\fswiss\fcharset77 Helvetica;\f7\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue128;}
\margl1440\margr1440\margb720\margt720\vieww17560\viewh17060\viewkind0
\deftab720
\pard\pardeftab720\sb240\sa60\qc

\f0\b\fs32 \cf0 Access Grid Mac Packaging How-To\
\pard\tx0\pardeftab720\li720\fi-360\ri0\sb240\sa60\ql\qnatural

\f1\i\fs28 \cf0 a)Overview\
\pard\pardeftab720\ql\qnatural

\f2\i0\b0\fs24 \cf0 \

\f3 Packaging for the AccessGrid toolkit has been designed to facilitate building packages for the platforms currently supported by the project, and to ease addition of new platforms.  The command for building a snapshot is BuildSnapshot.py
\f2 \
\

\f3 The build directory hierarchy has the following structure:
\f2 \
\

\f3 	packaging
\f2 \

\f3 	packaging/mac
\f2 \
\

\f3 The BuildSnapshot.py script resides in the packaging directory.  It performs a series of platform-independent steps, and then executes the BuildPackage.py script in the next level directory, determined based on the platform on which it is run.  The build progresses down the hierarchy, performing more specific build steps the deeper it goes.
\f2 \
\

\f3 At this time, the mac/BuildPackage.py script just creates the src.tar.gz file and calls the next level BuildPackage.py script.  Alternate distributions can be specified with the \'d4\'d1dist\'d5 option to BuildSnapshot.py:
\f2 \
\

\f3 	python BuildSnapshot.py [--dist <distName>]
\f2 \
\
\
\pard\tx0\pardeftab720\li720\fi-360\ri0\sb240\sa60\ql\qnatural

\f1\i\b\fs28 \cf0 b)Prepare the build machine\
\pard\pardeftab720\ql\qnatural

\f2\i0\b0\fs24 \cf0 \

\f3 The following steps are prerequisites to the build process; these packages are not included in the resulting package.
\f2 \
\pard\pardeftab720\li360\ri0\ql\qnatural
\cf0 \
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 Obtain OSX 10.3
\f2 \

\f4 \uc0\u61623 
\f3 Install 4Suite		{\field{\*\fldinst{HYPERLINK "http://sourceforge.net/projects/foursuite/"}}{\fldrslt \cf2 \ul \ulc2 http://sourceforge.net/projects/foursuite/}}     \uc0\u8232 	(4Suite is for automatic tests.  Installation may fail on OSX \'d0 this is not critical)
\f2 \

\f4 \uc0\u61623 
\f3 Install epydoc (for generating developer documentation from the python source)
\f2 \
\pard\pardeftab720\li2520\fi360\ri0\ql\qnatural
{\field{\*\fldinst{HYPERLINK "http://sourceforge.net/project/showfiles.php?group_id=32455"}}{\fldrslt 
\f3 \cf2 \ul \ulc2 http://sourceforge.net/project/showfiles.php?group_id=32455}}
\f3  
\f2 \
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 Install GPT3.0.1 and Globus Toolkit 3.0.2
\f2 \
\pard\pardeftab720\li2160\fi720\ri0\ql\qnatural

\f3 \cf0 http://www.globus.org/toolkit/downloads/3.0
\f2 \
\pard\pardeftab720\li1440\fi-360\ri0\ql\qnatural

\f5 \cf0 o
\f3 Make sure there are no leftover gpt or globus directories in your PATH.
\f2 \

\f5 o
\f3 Retrieve the \'d2GPT Source Installation Package\'d3
\f2 \

\f5 o
\f3 Extract the source tarball gt3.0.2-source-installer.tar.gz\
	* In the resulting folder, replace one of the files with the file at the following url:  \
	
\f6 http://www-unix.mcs.anl.gov/fl/research/accessgrid/software/required/source/globus-data-management-client-2.4.3-src_bundle.tar.gz\

\f3 	This file includes a patch to prevent sockets from hanging the VenueServer.
\f2 \

\f5 o
\f3 In the gt3.0.2-source-installer directory, extract the GPT source gpt-3.0.1-src.tar.gz
\f2 \

\f5 o
\f3 Set the GPT_LOCATION environment variable to /path/to/build/dir/gpt
\f2 \

\f5 o
\f3 In the gpt-3.0.1 directory, build GPT and run the postinstall script:
\f2 \
\pard\pardeftab720\li2160\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61607 
\f3 ./build_gpt
\f2 \
\pard\pardeftab720\li1440\fi-360\ri0\ql\qnatural

\f5 \cf0 o
\f3  Build the globus data management bundle:
\f2 \
\pard\pardeftab720\li2160\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61607 
\f3 Change to the gt3.0.2-source-installer directory.
\f2 \

\f4 \uc0\u61607 
\f3 Set the GLOBUS_LOCATION environment variable to /path/to/build/dir/globus
\f2 \

\f4 \uc0\u61607 
\f3 Clear your LD_LIBRARY_PATH of any old globus directories.
\f2 \

\f4 \uc0\u61607 
\f3 Build:  $\{GPT_LOCATION\}/sbin/gpt-build globus-data-management-client-2.4.3-src_bundle.tar.gz gcc32dbgpthr\uc0\u8232 After attempting to build once, perform the following modifications to allow the build to work:
\f2 \
\pard\pardeftab720\li2880\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 In $GLOBUS_LOCATION/sbin/libtool-$FLAVOR
\f2 \
\pard\pardeftab720\li2880\ri0\ql\qnatural

\f3 \cf0 Change: allow_undefined_flag="-flat_namespace -undefined suppress"
\f2 \

\f3 To:  allow_undefined_flag="-undefined dynamic_lookup"
\f2 \
\pard\pardeftab720\li2880\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 Set env var: MACOSX_DEPLOYMENT_TARGET=10.3
\f2 \

\f4 \uc0\u61623 
\f3 In $GLOBUS_LOCATION/libexec/globus-build-$FLAVOR.sh
\f2 \
\pard\pardeftab720\li2880\ri0\ql\qnatural

\f3 \cf0 use the following line for CPPFLAGS:
\f2 \

\f3 CPPFLAGS=" -I<yourglobusdir>/include -I<yourglobusdir>/include/gcc32dbgpthr -no-cpp-precomp -DHAVE_NETDB_H -DHAVE_SYS_SOCKET_H -DBIND_8_COMPAT"
\f2 \

\f3 Note: This correctly removes all occurances of /sw/*, either -I or -L and -traditional-cpp.\
\pard\pardeftab720\li2160\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61607 
\f3 $\{GPT_LOCATION\}/sbin/gpt-postinstall
\f2 \
\pard\pardeftab720\li2880\ri0\ql\qnatural
\cf0 \
\pard\tx0\pardeftab720\li720\fi-360\ri0\sb240\sa60\ql\qnatural

\f1\i\b\fs28 \cf0 c)Retrieve sources\
\pard\pardeftab720\ql\qnatural

\f2\i0\b0\fs24 \cf0 \
\pard\pardeftab720\li360\ri0\ql\qnatural

\f3 \cf0 Follow these steps to build an AG package from CVS.  If you are building from sources in the source tarball, all required sources are included therein, and don\'d5t have to be retrieved as described here.
\f2 \
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 Create a directory that will be used for the build (e.g., /path/to/build/dir)
\f2 \

\f4 \uc0\u61623 
\f3 Change to the build directory
\f2 \

\f4 \uc0\u61623 
\f3 Checkout ag-dist-mac from ANL cvs
\f2 \
\pard\pardeftab720\li1440\fi-360\ri0\ql\qnatural

\f5 \cf0 o
\f3 CVSROOT: :pserver:anonymous@cvs.mcs.anl.gov:/cvs/fl
\f2 \
\pard\pardeftab720\fi720\ri0\ql\qnatural

\f3 \cf0 The checkout includes the following:
\f2 \
\pard\pardeftab720\li1440\fi-360\ri0\ql\qnatural

\f5 \cf0 o
\f3 ag-packaging
\f2 \

\f5 o
\f3 pyOpenSSL
\f2 \
\pard\pardeftab720\li360\ri0\ql\qnatural
\cf0 \
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 Retrieve the following packages and extract them:
\f2 \
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\li1080\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 Copy the gt3.0.2-source-installer directory (from above) to the build directory
\f2 \

\f4 \uc0\u61623 
\f3 fpconst-0.7.0 http://research.warnes.net/~warnes/fpconst
\f2 \

\f4 \uc0\u61623 
\f3 SOAPpy-0.11.4		http://pywebsvcs.sourceforge.net
\f2 \
\pard\pardeftab720\li1800\fi-360\ri0\ql\qnatural

\f5 \cf0 o
\f3 Apply the one-line patch to SOAPpy (remove a %s from Server.py line 337).
\f2 \
\pard\pardeftab720\li1080\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 pyGlobus 2.4\uc0\u8232 Download pyGlobus from either the latest AccessGrid release tarball or from the \'d2Download GTG Software\'d3 link on the pyGlobus main page: \'d2pyGlobus for gt-2.4.x\'d3\u8232 We currently only build the io, security, and util modules.\

\f4 \uc0\u61623 
\f7  
\f3 Download ucl rat sources from cvs:\

\f2 	http://www-mice.cs.ucl.ac.uk/multimedia/software/documentation/cvsanon.html\

\f4 \uc0\u61623 
\f7  
\f3 Download openmash vic sources:\
	http://www.openmash.org/developers/cvs/index.html\
\pard\tx0\pardeftab720\li720\fi-360\ri0\sb240\sa60\ql\qnatural

\f1\i\b\fs28 \cf0 d)Build packages\
\pard\pardeftab720\li360\ri0\ql\qnatural

\f2\i0\b0\fs24 \cf0 \
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 Set the AGBUILDROOT environment variable to it
\f2 \
\pard\pardeftab720\li1440\fi-360\ri0\ql\qnatural

\f5 \cf0 o
\f3 export AGBUILDROOT=/path/to/build/dir
\f2 \
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 Change to the build directory
\f2 \

\f4 \uc0\u61623 
\f3 Change to the ag-packaging directory
\f2 \

\f4 \uc0\u61623 
\f3 To build from CVS:
\f2 \
\pard\pardeftab720\li360\ri0\ql\qnatural
\cf0 \
\pard\pardeftab720\li1440\ri0\ql\qnatural

\f3 \cf0 sudo python BuildSnapshot.py [--dist <distName>]
\f2 \
\

\f3 Towards the end of the build process, follow the instructions the build script gives you on using the PackageManager and Disk Utility programs.
\f2 \
\
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 To build from a source tarball:
\f2 \
\pard\pardeftab720\li720\fi720\ri0\ql\qnatural

\f3 \cf0 sudo python BuildSnapshot.py  --no-checkout
\f2 \
\pard\pardeftab720\li2880\fi720\ri0\ql\qnatural

\f3 \cf0 --sourcedir=<name of AccessGrid dir from src.tar.gz>
\f2 \
\pard\pardeftab720\ql\qnatural
\cf0 \

\f3 	BuildSnapshot will (among other things):
\f2 \
\pard\pardeftab720\li1440\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 checkout the AccessGrid source code into a timestamped directory
\f2 \

\f4 \uc0\u61623 
\f3 Build the AccessGrid python module
\f2 \

\f4 \uc0\u61623 
\f3 Run tests
\f2 \

\f4 \uc0\u61623 
\f3 Generate epydoc documentation
\f2 \

\f4 \uc0\u61623 
\f3 Make service packages (e.g. AudioService.zip)
\f2 \

\f4 \uc0\u61623 
\f3 Make shared application packages (e.g. SharedBrowser.agpkg)
\f2 \

\f4 \uc0\u61623 
\f3 Execute mac/BuildPackage.py
\f2 \
\pard\pardeftab720\ql\qnatural
\cf0 \

\f3 The result is a dmg.gz file.  
\f2 \
\
\pard\tx0\pardeftab720\li720\fi-360\ri0\sb240\sa60\ql\qnatural

\f1\i\b\fs28 \cf0 e)Notes\
\pard\pardeftab720\ql\qnatural

\f2\i0\b0\fs24 \cf0 \
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 BuildSnapshot and underlying scripts run mostly without error checking, making it very difficult to determine whether the build was successful.  It should inform and exit if a problem occurs.
\f2 \
\pard\pardeftab720\li360\ri0\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural
\cf0 \
}