{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf230
{\fonttbl\f0\fswiss\fcharset77 Arial-BoldMT;\f1\fswiss\fcharset77 Arial-BoldItalicMT;\f2\froman\fcharset77 Times-Roman;
\f3\froman\fcharset77 TimesNewRomanPSMT;\f4\fnil\fcharset77 LastResort;\f5\fnil\fcharset77 Monaco;
\f6\fmodern\fcharset77 CourierNewPSMT;\f7\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\margb720\margt720\vieww16140\viewh17000\viewkind0
\deftab720
\pard\pardeftab720\sb240\sa60\qc

\f0\b\fs32 \cf0 Access Grid Mac Packaging How-To\
\pard\tx0\pardeftab720\li720\fi-360\ri0\sb240\sa60\ql\qnatural

\f1\i\fs28 \cf0 a)Overview\
\pard\pardeftab720\ql\qnatural

\f2\i0\b0\fs24 \cf0 \

\f3 Packaging for the AccessGrid toolkit has been designed to facilitate building packages for the platforms currently supported by the project, and to ease addition of new platforms.  The command for building a snapshot is BuildSnapshot.py
\f2 \
\

\f3 The build directory hierarchy has the following structure:
\f2 \
\

\f3 	packaging
\f2 \

\f3 	packaging/mac
\f2 \
\

\f3 The BuildSnapshot.py script resides in the packaging directory.  It performs a series of platform-independent steps, and then executes the BuildPackage.py script in the next level directory, determined based on the platform on which it is run.  The build progresses down the hierarchy, performing more specific build steps the deeper it goes.
\f2 \
\

\f3 At this time, the mac/BuildPackage.py script just creates the src.tar.gz file and calls the next level BuildPackage.py script.
\f2 \
\

\f3 	python BuildSnapshot.py
\f2 \
\
\
\pard\tx0\pardeftab720\li720\fi-360\ri0\sb240\sa60\ql\qnatural

\f1\i\b\fs28 \cf0 b)Prepare the build machine\
\pard\pardeftab720\ql\qnatural

\f2\i0\b0\fs24 \cf0 \

\f3 The following steps are prerequisites to the build process; these packages are not included in the resulting package.
\f2 \
\pard\pardeftab720\li360\ri0\ql\qnatural
\cf0 \
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f5  
\f3 Obtain OSX 10.4\

\f4 \uc0\u61623 
\f5  
\f3 Install Swig 1.3.24\

\f4 \uc0\u61623 
\f3  Build and install ZSI to the local machine so it can be used in the build process:\
\pard\pardeftab720\li360\ri0\ql\qnatural

\f6 \cf0    o (to retrieve the source; refer to the the section below)
\f3 \

\f6    o cd zsi\
   o python setup.py install\
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f2 \cf0 \
\pard\tx0\pardeftab720\li720\fi-360\ri0\sb240\sa60\ql\qnatural

\f1\i\b\fs28 \cf0 c)Retrieve sources\
\pard\pardeftab720\ql\qnatural

\f2\i0\b0\fs24 \cf0 \
\pard\pardeftab720\li360\ri0\ql\qnatural

\f3 \cf0 Follow these steps to build an AG package from CVS.  If you are building from sources in the source tarball, all required sources are included therein, and don\'d5t have to be retrieved as described here.
\f2 \
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 Create a directory that will be used for the build (e.g., /path/to/build/dir)
\f2 \

\f4 \uc0\u61623 
\f3 Change to the build directory
\f2 \

\f4 \uc0\u61623 
\f3 Checkout ag-dist-mac from ANL cvs
\f2 \
\pard\pardeftab720\li1440\fi-360\ri0\ql\qnatural

\f6 \cf0 o export 
\f3 CVSROOT=:pserver:anonymous@cvs.mcs.anl.gov:/cvs/fl\

\f6 o cvs co ag-dist-mac
\f2 \
\pard\pardeftab720\fi720\ri0\ql\qnatural

\f3 \cf0 The checkout includes the following:
\f2 \
\pard\pardeftab720\li1440\fi-360\ri0\ql\qnatural

\f6 \cf0 o 
\f3 ag-packaging
\f2 \

\f6 o 
\f3 pyOpenSSL
\f2 \
\pard\pardeftab720\li360\ri0\ql\qnatural
\cf0 	Also checkout "common":\
	     
\f6 o cvs co common
\f2 \
\
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 Retrieve the following packages and extract them:
\f2 \
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\li1080\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f5  
\f3 Download ucl rat sources from cvs:\

\f2 	http://www-mice.cs.ucl.ac.uk/multimedia/software/documentation/cvsanon.html\
            [set CVSROOT with the value on the webpage above]\
            mkdir ucl\
            cd ucl\
            cvs co tcl-8.0 tk-8.0 common rat\

\f4 \uc0\u61623 
\f5  
\f3 Download ag vic sources:\
	CVSROOT: :pserver:anonymous@cvs.mcs.anl.gov:/cvs/fl\
	cvs co -r osx-aqua ag-media\

\f4 \uc0\u61623 
\f5  
\f7  pyxml 0.8.3+ (http://sourceforge.net/project/showfiles.php?group_id=6473)\

\f4 \uc0\u61623 
\f5  
\f7  twisted.internet 2.1.0 (http://twistedmatrix.com/projects/core/)\

\f4 \uc0\u61623 
\f5  
\f7  zope.interface 3.0.1 (http://www.zope.org/Products/ZopeInterface)\

\f4 \uc0\u61623 
\f5  
\f7  bajjer 0.2.4\

\f4 \uc0\u61623 
\f5  
\f7  m2crypto 0.15 (http://wiki.osafoundation.org/bin/view/Projects/MeTooCrypto) ( edit setup.py to point to openssl )
\f3 \

\f4 \uc0\u61623 
\f5  
\f7   feedparser 3.3 (http://directory.fsf.org/livecomm/misc/feedparser.html)\

\f4 \uc0\u61623 
\f5  
\f7  zsi (cvs: http://pywebsvcs.sourceforge.net/)\

\f4 \uc0\u61623 
\f5  
\f7  bonjour-py (http://www-unix.mcs.anl.gov/fl/research/accessgrid/bonjour-py)\

\f3 	\
\pard\tx0\pardeftab720\li720\fi-360\ri0\sb240\sa60\ql\qnatural

\f1\i\b\fs28 \cf0 d)Build packages\
\pard\pardeftab720\li360\ri0\ql\qnatural

\f2\i0\b0\fs24 \cf0 \
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3  Build AG Vic:\
\pard\pardeftab720\li360\ri0\ql\qnatural

\f2 \cf0  	 
\f6 o cd ag-media
\f2 \
 	 
\f6 o ./build-vic\
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3  Build UCL Rat:\
\pard\pardeftab720\li360\ri0\ql\qnatural

\f2 \cf0  	 
\f6 o cd ucl
\f2 \
 	 
\f6 o cd common; ./configure; make; cd ..\
   o cd tcl-8.0/unix; ./configure; make; cd ..\
   o cd tk-8.0/unix; ./configure; make; cd ..\
   o Copy rat-kill.c from ag-media/rat to ucl/rat\
   o Add the following two lines to ucl/rat/Makefile \
        $(RATVER)-kill: rat-kill.o\
        	$(CC) $(CFLAGS) rat-kill.o $(COMMON_LIB) $(LIBS) -o $(RATVER)-kill\
   o Insert $(RATVER)-kill into the "all:" in ucl/rat/Makefile\
		all: version.h sdr2.plugin.S02.audio.rtp.-.$(RATVER) $(RATVER).spec $(RATVER) $(RATVER)-ui $(RATVER)-media $(RATVER)-kill rat Makefile\
   o Add the third line below to the ucl/rat/Makefile:\
        @$\{ECHO\} "Generating rat shell script"\
        @$\{ECHO\} "#!/bin/sh" > $@\
        @$\{ECHO\} "export DISPLAY=:0.0" >> $@\
   o cd rat; ./configure; make\
\
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3  Build AG Common:\
\pard\pardeftab720\li360\ri0\ql\qnatural

\f6 \cf0    o cd common\
   o ./configure\
   o make
\f2 \
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural
\cf0 \
\pard\pardeftab720\li360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 Set the AGBUILDROOT environment variable to the build directory you create above.
\f2 \
\pard\pardeftab720\li1440\fi-360\ri0\ql\qnatural

\f6 \cf0 o 
\f3 export AGBUILDROOT=/path/to/build/dir
\f2 \
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 Change to the build directory
\f2 \

\f4 \uc0\u61623 
\f3 Change to the ag-packaging directory
\f2 \

\f4 \uc0\u61623 
\f3 To build from CVS code:
\f2 \
\pard\pardeftab720\li360\ri0\ql\qnatural
\cf0 \
\pard\pardeftab720\li1440\ri0\ql\qnatural

\f3 \cf0 python BuildSnapshot.py [--meta=<metaName>]
\f2 \

\f3 Example: python BuildSnapshot.py --meta="3.x beta" --verbose
\f2 \
\
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 To build from a source tarball:
\f2 \
\pard\pardeftab720\li720\fi720\ri0\ql\qnatural

\f3 \cf0 python BuildSnapshot.py  --no-checkout
\f2 \
\pard\pardeftab720\li2880\fi720\ri0\ql\qnatural

\f3 \cf0 --sourcedir=<name of AccessGrid dir from src.tar.gz>
\f2 \
\pard\pardeftab720\ql\qnatural
\cf0 \

\f3 	BuildSnapshot will (among other things):
\f2 \
\pard\pardeftab720\li1440\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 checkout the AccessGrid source code into a timestamped directory
\f2 \

\f4 \uc0\u61623 
\f3 Build the AccessGrid python module
\f2 \

\f4 \uc0\u61623 
\f3 Make service packages (e.g. AudioService.zip)
\f2 \

\f4 \uc0\u61623 
\f3 Make shared application packages (e.g. SharedBrowser.agpkg)
\f2 \

\f4 \uc0\u61623 
\f3 Execute mac/BuildPackage.py
\f2 \
\pard\pardeftab720\ql\qnatural
\cf0 \

\f3 The result is a dmg.gz file.  
\f2 \
\
\pard\tx0\pardeftab720\li720\fi-360\ri0\sb240\sa60\ql\qnatural

\f1\i\b\fs28 \cf0 e)Notes\
\pard\pardeftab720\ql\qnatural

\f2\i0\b0\fs24 \cf0 \
\pard\pardeftab720\li720\fi-360\ri0\ql\qnatural

\f4 \cf0 \uc0\u61623 
\f3 BuildSnapshot and underlying scripts run mostly without error checking, making it very difficult to determine whether the build was successful.  It should inform and exit if a problem occurs.
\f2 \
\pard\pardeftab720\li360\ri0\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural
\cf0 \
}