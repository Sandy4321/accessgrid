=====================================
Core Toolkit Design Changes for 2.1.3
=====================================
 
:version: $Revision: 1.1 $
:author: Ivan R. Judson <judson@mcs.anl.gov>
:status: Draft

Abstract
========

This document proposes design modifications to the existing Core Toolkit
Design to make it more solid, with a factoring that allows an
easier transition to GT3 or other network interfaces. It applies well
known patterns, leveraging the pattern terminology to keep the code as
clear as possible and also abstracts the persistence solution for the
venues.

Overview
========

There are a few reorganizations that can be done within the AG
module. These will result in a reasonably clean and simple set of
logical sub-modules with interfaces defined among them. The
separations that are proposed in this enhancement include:

1. Separating interfaces and implementations

  The proposed naming is for interfaces to have the name format:

  - **<Network Protocol><Class Name>I**, or
  - **<Network Protocol><Class Name>Interface**

  (e.g. SOAPVenueServerI or SOAPVenueServerInterface)
  then the Venue Server implementation can retain the name
  VenueServer. This allows the creation of many interfaces with clear
  naming, for the same implementation object and the additional syntax
  is retained where it is needed for clarification.

2. Creating a SOAP interface base class with two methods:

  - a constructor that registers the implementation with interface and
    the interface with the implementation, and 
  - an authorization method that is used by default, the proposed
    policy is that the default authorization method disallow incoming
    actions.
 
3. Move AppDatabase from Toolkit to VenueClient
   [Done]
  
  This is the appropriate place for it to go.

4. Update to latest version of pyGlobus
5. Update to GT2.4.3 on Linux, Mac OS X
6. Update to GT2.4.3+ on Windows
  
  Updating these pieces of software should make it easier for us to
  maintain, and it will make it easier to migrate in the future.

Summary of Modifications
========================

Modified:

These objects need to have their interfaces separated from the implementation.

- Venue Server
- Venue
- AG Node Service
- AG Service Manager
- AG Service
- Toolkit.Application
- VenueClient

Removed:

- Service Object
- Service Base
- Client
- Server
- AGGSISOAP

New:

- SOAPInterface
- SOAPVenueServerI
- SOAPVenueI
- SOAPAGNodeServiceI
- SOAPAGServiceManagerI
- SOAPServiceI
- LogFactory
- ConfigINIPersistor
- VenueMemento(Memento)

Module Organization
-------------------

- AccessGrid
   
  - hosting

    - pyGlobus [Nothing required now]

      - tests

        - tclient.py
        - test_invalid.py
        - tserver.py

    - <pyGridware> (Future Addition)

- SOAPpy [standard SOAPpy install]

  - wstools [standard wstools install

- pyGlobus [standard pyGlobus install]
        
Specifications
==============

SOAPInterface:
    def __init__(self, impl):
    def _authorize(self, *args, **kw):

VenueServer

  in the __init__ method, this object creates a SOAPVenueServerI object 
  passing self. This effectively creates a single SOAP interface 
  (self.interface), later when we support multiple interfaces per object this
  should be removed and replaced with self.interfaces = list() and 
  AddInterface(self, interface).

  The server also has a authorize(subject, actionName) that exposes the
  mechanism for the SOAP layer to do authorization.

Venue

  in the __init__ method, this object creates a SOAPVenueI object 
  passing self. This effectively creates a single SOAP interface 
  (self.interface), later when we support multiple interfaces per object this
  should be removed and replaced with self.interfaces = list() and 
  AddInterface(self, interface).

  The venue also has a authorize(subject, actionName) that exposes the
  mechanism for the SOAP layer to do authorization.

Security Issues
===============

None, this set of modifications should in no way affect the security
of the system.

Interoperability Issues
=======================

The refactoring in this proposal should not affect the
interoperability of the client with servers and services. This is an
internal refactoring.

Related AGEPs
=============

- The Shared Application AGEP.
- The Usage Logging AGEP.
- The Toolkit Initialization AGEP.
- The Venue Client Refactoring AGEP.
- The Authorization Refactoring AGEP.

References
==========

1. Design Patterns: Elements of Reusable Object-Oriented Software, Erich 
   Gamma, Richard Helm, Ralph Johnson, John Vlissides. Addison-Wesley 
   Professions Computing Series, Addison Wesley Longman, Inc, Reading, MA, 
   1995.
2. `Python Enhancement Proposals`_

Copyright
=========

This document is Copyright 2003, The University of Chicago/Argonne
National Laboratory.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:



.. _`Python Enhancement Proposals`: http://www.python.org/peps/