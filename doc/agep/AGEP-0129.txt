=====================================
Application Services
=====================================
 
:version: $Revision: 1.3 $
:author: Susanne Lefvert <lefvert@mcs.anl.gov>
:status: Draft
:contact: ag-tech@mcs.anl.gov

Abstract
========

    This document describes a proposed design for application services.

Overview
========
    
    
    A plug-in application service is an external service running at a remote location. 
    The service registers with the venue, in the same way a network service do, allowing
    participants of the venue to use the service. Since services can be very different in
    nature, each service will have a unique SOAP interface to provide methods
    needed for its specific character. Additionally, each service has a client that is
    associated with the service mimetype to interact with the SOAP interface.  When 
    a service registers with the venue, a new entry will show up under the "Services" heading
    in the venue client, and when a participant selects "Open" from the service menu, the 
    custom client will be launched.  

    To make it easier to develop application services, a service base class will be provided that
    takes care of AG specific details, such as registering with the venue, starting a SOAP 
    interface, creating descriptions, etc. Services should inherit from this base class.    

Summary of Modifications
========================
   
   **New base class for application services:**
   
   AGAppService


   **Changes to Descriptions.py**

   Remove (line 238):
   ::

       def __init__(self, name, description, uri, mimetype):   

   Add (line 238):
   ::
           
           def __init__(self, name, description, uri, mimetype,
                    extension = None, version = None, visible = 1):  

               self.extension = extension
               self.version = version
               self.visible = visible
   
   **Changes to VenueClientController.py**

   Remove (line 1121):
   ::
   
         elif isinstance(objDesc, ServiceDescription):
             # Fix odd commands
             if IsWindows():
                 if command.find("%1") != -1:
                     command = command.replace("%1", "")
                 if command.find("%L") != -1:
                     command = command.replace("%L", "")
                 if command.find("%*") != -1:
                     command = command.replace("%*", "")
             else:
                 if command.find("%s") != -1:
                     command = command.replace("%s", "")
 
             command = command.strip()
             
             if len(command) > 1:
                 if command.find("%") == -1:
                     command = command+" %(appUrl)s"
             else:
                 command = "\"%(appUrl)s\""

    Add (line 1126):
    ::

        if (isinstance(objDesc, ApplicationDescription) or
           isinstance(objDesc, AGNetworkServiceDescription) or
           isinstance(objDesc, ServiceDescription)):

    Remove (line 1336)
    :: 
        
         if isinstance(objDesc,ServiceDescription):
             # Data and Service commands are retrieved from the mime db
             list = objDesc.name.split('.')
             ext = ""
             
             if len(list) == 2:
                 ext = list[1]

             commandList = self.mimeConfig.GetMimeCommands(
                 mimeType = objDesc.mimeType,
                 ext = ext)
     
    Add (line 1350):
    ::
        
         elif isinstance(objDesc, ServiceDescription):
             commandList = dict()
             commandList.update(self.userAppDatabase.GetCommands(objDesc.mimeType))
             commandList.update(self.systemAppDatabase.GetCommands(objDesc.mimeType))
    
        
Module Organization
-------------------

    AccessGrid
        AccessGrid
            **AGAppService**
            
Specifications
==============
        
**AGAppService**
    
    Base class for creating services. A new service should inherit this
    class.

    ::

        AGAppService
            name : string
            description : string
            version : int
            mimeType : string
            extension : string
            visible : int
            venueProxies : dict
            url : string
            log : Log
            app : CmdlineApplication

            def __init__(self, name, description, version, mimeType, extension):       
            def Start(soapInterface)
            def Stop()
            def StartSignalLoop()
            def StopSignalLoop()
            def RegisterWithVenues(urls)
            def UnregisterFromVenues(urls)
            def RegisterWithVenueServer(url)
            def UnregisterFromVenueServer(url)
          
            
Open Issues
============
    
    1 This service is very similar to a network service. Should they be named the same and
    use the same descriptions? Differences: 
        
        * A network service has one transform method that is called from the venue when we 
          need new streams during capability negotiation. An application service has a custom 
          SOAP interface that is called from its custom client when a user decides to open the 
          service.
        * A network service should not necessarily be displayed for the user while an application
          service should be visible in the venue client.

    2 Should the venue be able to start a service locally, like we are currently doing with applications? 
     
    3 How should we deal with heartbeats? Which method should be used to confirm the remote service is still running? The heartbeat mechanism should probably be implemented in the same way as we do for venue clients (i.e. soap calls?).

    4 Should a service be persisted in the venue? Or, does a service provider have to reconnect every time the venue server is restarted similar to current bridge design?

    5 What should we call the application service directory in cvs and packaging? Currently, I added AccessGrid/services/applications with the code in cvs and application clients get extracted to Application Data/SharedApplications

Interoperability Issues
=======================

    No interoperability issues.
   
Implementation
==============
    
   *  **AGAppService** - Application service base class 
        
         http://www-unix.mcs.anl.gov/~lefvert/AGEP/AGEP-0129/DebugService/AGAppService.py
   
   * **DebugService.py** - Example on how to implement a service using the AGAppService base class 
        
         http://www-unix.mcs.anl.gov/~lefvert/AGEP/AGEP-0129/DebugService/DebugService.py
   
   * **DebugClient.py** - Example service client and app file 
         
         http://www-unix.mcs.anl.gov/~lefvert/AGEP/AGEP-0129/DebugService/DebugClient.py

   * **DebugService.app** - Example app file for service and client registration with the agpm (This still needs some client modifications in order to work properly) 
         
         http://www-unix.mcs.anl.gov/~lefvert/AGEP/AGEP-0129/DebugService/DebugService.app

   **Instructions:**


   1 Modify Descriptions.py and VenueClientController.py according to section "Summary of Modifications"
    
   2 Run local venue server

   3 Run DebugService.py

   4 In the venue client, open debug service properties and copy the *url*

   5 Run DebugService.py --s *url*

Copyright
=========

    This document is Copyright 2003, The University of Chicago/Argonne National Laboratory.

..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:

